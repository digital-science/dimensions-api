{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false",
    "colab_type": "text",
    "id": "Pesu5qAD6J7-"
   },
   "source": [
    "# Journal Profiling Part 1: Getting the Data\n",
    "\n",
    "This Python notebook shows how to use the [Dimensions Analytics API](https://www.dimensions.ai/dimensions-apis/) to extract [publications data ](https://docs.dimensions.ai/dsl/datasource-publications.html) for a specific journal, as well its authors and affiliations.\n",
    "\n",
    "This tutorial is the first of a series that uses the data extracted in order to generate a 'journal profile' report. See the [API Lab homepage](https://api-lab.dimensions.ai/) for the other tutorials in this series.\n",
    "\n",
    "\n",
    "In this notebook we are going to:\n",
    "\n",
    "* extract all publications data for a given journal\n",
    "* have a quick look at the publications' authors and affiliations \n",
    "* review how many authors have been disambiguated with a Dimensions Researcher ID\n",
    "* produce a dataset of non-disambiguated authors that can be used for manual disambiguation "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false",
    "colab_type": "text",
    "id": "ghfJ7CSbo6Dr"
   },
   "source": [
    "## Prerequisites: Installing the Dimensions Library and Logging in"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "Collapsed": "false",
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 85
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 22421,
     "status": "ok",
     "timestamp": 1590004308752,
     "user": {
      "displayName": "Michele Pasin",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GiYfmLTPbeMuYDDrETLbTVXTXnfVr9f7eBtkmR73A=s64",
      "userId": "10309320684375994511"
     },
     "user_tz": -60
    },
    "id": "zN1l7rvMo6Ds",
    "outputId": "cf4253c6-272a-4186-8461-72db2a225670"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DimCli v0.6.8.1 - Succesfully connected to <https://app.dimensions.ai> (method: dsl.ini file)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "        <script type=\"text/javascript\">\n",
       "        window.PlotlyConfig = {MathJaxConfig: 'local'};\n",
       "        if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\n",
       "        if (typeof require !== 'undefined') {\n",
       "        require.undef(\"plotly\");\n",
       "        requirejs.config({\n",
       "            paths: {\n",
       "                'plotly': ['https://cdn.plot.ly/plotly-latest.min']\n",
       "            }\n",
       "        });\n",
       "        require(['plotly'], function(Plotly) {\n",
       "            window._Plotly = Plotly;\n",
       "        });\n",
       "        }\n",
       "        </script>\n",
       "        "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "# @markdown # Get the API library and login\n",
    "# @markdown Click the 'play' button on the left (or shift+enter) after entering your API credentials\n",
    "\n",
    "username = \"\" #@param {type: \"string\"}\n",
    "password = \"\" #@param {type: \"string\"}\n",
    "endpoint = \"https://app.dimensions.ai\" #@param {type: \"string\"}\n",
    "\n",
    "\n",
    "!pip install dimcli plotly tqdm -U --quiet\n",
    "import dimcli\n",
    "from dimcli.shortcuts import *\n",
    "dimcli.login(username, password, endpoint)\n",
    "dsl = dimcli.Dsl()\n",
    "\n",
    "#\n",
    "# load common libraries\n",
    "import time\n",
    "import sys\n",
    "import json\n",
    "import os\n",
    "import pandas as pd\n",
    "from pandas.io.json import json_normalize\n",
    "from tqdm.notebook import tqdm as progress\n",
    "\n",
    "#\n",
    "# charts libs\n",
    "# import plotly_express as px\n",
    "import plotly.express as px\n",
    "if not 'google.colab' in sys.modules:\n",
    "  # make js dependecies local / needed by html exports\n",
    "  from plotly.offline import init_notebook_mode\n",
    "  init_notebook_mode(connected=True)\n",
    "#\n",
    "# create output data folder\n",
    "FOLDER_NAME = \"journal-profile-data\"\n",
    "if not(os.path.exists(FOLDER_NAME)):\n",
    "    os.mkdir(FOLDER_NAME)\n",
    "    \n",
    "def save(df,filename_dot_csv):\n",
    "    df.to_csv(FOLDER_NAME+\"/\"+filename_dot_csv, index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false",
    "colab_type": "text",
    "id": "Z1jwOf1F64mr"
   },
   "source": [
    "## Selecting a Journal and Extracting All Publications Metadata"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "Collapsed": "false",
    "cellView": "form",
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 238
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 30263,
     "status": "ok",
     "timestamp": 1590004324419,
     "user": {
      "displayName": "Michele Pasin",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GiYfmLTPbeMuYDDrETLbTVXTXnfVr9f7eBtkmR73A=s64",
      "userId": "10309320684375994511"
     },
     "user_tz": -60
    },
    "id": "Ku0GkHfE7JI7",
    "outputId": "23e41dd0-af76-4150-9a60-17da1bd1746e"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DSL Query:\n",
      "----\n",
      " search publications where \n",
      "    journal.title=\"Nature Genetics\" and \n",
      "    year>=2015 \n",
      "    return publications[basics+altmetric+times_cited] \n",
      "----\n",
      "500 / ...\n",
      "500 / 1480\n",
      "1000 / 1480\n",
      "1480 / 1480\n",
      "===\n",
      "Records extracted: 1480\n"
     ]
    }
   ],
   "source": [
    "#@title Select a journal from the dropdown\n",
    "#@markdown If the journal isn't there, you can try type in the exact name instead.\n",
    "\n",
    "journal_title = \"Nature Genetics\" #@param ['Nature', 'Nature Communications', 'Nature Biotechnology', 'Nature Medicine', 'Nature Genetics', 'Nature Neuroscience', 'Nature Structural & Molecular Biology', 'Nature Methods', 'Nature Cell Biology', 'Nature Immunology', 'Nature Reviews Drug Discovery', 'Nature Materials', 'Nature Physics', 'Nature Reviews Neuroscience', 'Nature Nanotechnology', 'Nature Reviews Genetics', 'Nature Reviews Urology', 'Nature Reviews Molecular Cell Biology', 'Nature Precedings', 'Nature Reviews Cancer', 'Nature Photonics', 'Nature Reviews Immunology', 'Nature Reviews Cardiology', 'Nature Reviews Gastroenterology & Hepatology', 'Nature Reviews Clinical Oncology', 'Nature Reviews Endocrinology', 'Nature Reviews Neurology', 'Nature Chemical Biology', 'Nature Reviews Microbiology', 'Nature Geoscience', 'Nature Reviews Rheumatology', 'Nature Climate Change', 'Nature Reviews Nephrology', 'Nature Chemistry', 'Nature Digest', 'Nature Protocols', 'Nature Middle East', 'Nature India', 'Nature China', 'Nature Plants', 'Nature Microbiology', 'Nature Ecology & Evolution', 'Nature Astronomy', 'Nature Energy', 'Nature Human Behaviour', 'AfCS-Nature Molecule Pages', 'Human Nature', 'Nature Reviews Disease Primers', 'Nature Biomedical Engineering', 'Nature Reports Stem Cells', 'Nature Reviews Materials', 'Nature Sustainability', 'Nature Catalysis', 'Nature Electronics', 'Nature Reviews Chemistry', 'Nature Metabolism', 'Nature Reviews Physics', 'Nature Machine Intelligence', 'NCI Nature Pathway Interaction Database', 'Nature Reports: Climate Change'] {allow-input: true}\n",
    "start_year = 2015  #@param {type: \"number\"}\n",
    "#@markdown ---\n",
    "\n",
    "# PS \n",
    "# To get titles from the API one can do this:\n",
    "# > %dsldf search publications where journal.title~\"Nature\" and publisher=\"Springer Nature\" return journal limit 100\n",
    "# > \", \".join([f\"'{x}'\" for x in list(dsl_last_results.title)]) \n",
    "#\n",
    "\n",
    "q_template = \"\"\"search publications where \n",
    "    journal.title=\"{}\" and \n",
    "    year>={} \n",
    "    return publications[basics+altmetric+times_cited]\"\"\"\n",
    "q = q_template.format(journal_title, start_year)\n",
    "print(\"DSL Query:\\n----\\n\", q, \"\\n----\")\n",
    "pubs = dsl.query_iterative(q.format(journal_title, start_year), limit=500)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false",
    "colab_type": "text",
    "id": "FFT3DayHo6Dy"
   },
   "source": [
    "Save the data as a CSV file in case we want to reuse it later"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "Collapsed": "false",
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1946
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 3101,
     "status": "ok",
     "timestamp": 1590004329997,
     "user": {
      "displayName": "Michele Pasin",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GiYfmLTPbeMuYDDrETLbTVXTXnfVr9f7eBtkmR73A=s64",
      "userId": "10309320684375994511"
     },
     "user_tz": -60
    },
    "id": "xnwSEydio6Dy",
    "outputId": "6cde27d6-8c9c-4b5c-8544-7f3871ea390d"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>altmetric</th>\n",
       "      <th>title</th>\n",
       "      <th>year</th>\n",
       "      <th>pages</th>\n",
       "      <th>type</th>\n",
       "      <th>times_cited</th>\n",
       "      <th>author_affiliations</th>\n",
       "      <th>id</th>\n",
       "      <th>journal.id</th>\n",
       "      <th>journal.title</th>\n",
       "      <th>volume</th>\n",
       "      <th>issue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>Publisher Correction: Comprehensive analysis o...</td>\n",
       "      <td>2020</td>\n",
       "      <td>1-1</td>\n",
       "      <td>article</td>\n",
       "      <td>0</td>\n",
       "      <td>[[{'first_name': 'Isidro', 'last_name': 'Corté...</td>\n",
       "      <td>pub.1127548497</td>\n",
       "      <td>jour.1103138</td>\n",
       "      <td>Nature Genetics</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>14.0</td>\n",
       "      <td>Uncoupling histone H3K4 trimethylation from de...</td>\n",
       "      <td>2020</td>\n",
       "      <td>1-11</td>\n",
       "      <td>article</td>\n",
       "      <td>0</td>\n",
       "      <td>[[{'first_name': 'Delphine', 'last_name': 'Dou...</td>\n",
       "      <td>pub.1127504415</td>\n",
       "      <td>jour.1103138</td>\n",
       "      <td>Nature Genetics</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>38.0</td>\n",
       "      <td>Evaluating two different models of peanut’s or...</td>\n",
       "      <td>2020</td>\n",
       "      <td>1-3</td>\n",
       "      <td>article</td>\n",
       "      <td>1</td>\n",
       "      <td>[[{'first_name': 'David J.', 'last_name': 'Ber...</td>\n",
       "      <td>pub.1127499311</td>\n",
       "      <td>jour.1103138</td>\n",
       "      <td>Nature Genetics</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3.0</td>\n",
       "      <td>Reply to: Evaluating two different models of p...</td>\n",
       "      <td>2020</td>\n",
       "      <td>1-4</td>\n",
       "      <td>article</td>\n",
       "      <td>1</td>\n",
       "      <td>[[{'first_name': 'Weijian', 'last_name': 'Zhua...</td>\n",
       "      <td>pub.1127503074</td>\n",
       "      <td>jour.1103138</td>\n",
       "      <td>Nature Genetics</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>195.0</td>\n",
       "      <td>Genetic identification of cell types underlyin...</td>\n",
       "      <td>2020</td>\n",
       "      <td>482-493</td>\n",
       "      <td>article</td>\n",
       "      <td>1</td>\n",
       "      <td>[[{'first_name': 'Julien', 'last_name': 'Bryoi...</td>\n",
       "      <td>pub.1127148454</td>\n",
       "      <td>jour.1103138</td>\n",
       "      <td>Nature Genetics</td>\n",
       "      <td>52</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>193.0</td>\n",
       "      <td>Genome-wide association meta-analyses combinin...</td>\n",
       "      <td>2020</td>\n",
       "      <td>494-504</td>\n",
       "      <td>article</td>\n",
       "      <td>1</td>\n",
       "      <td>[[{'first_name': 'Maria Teresa', 'last_name': ...</td>\n",
       "      <td>pub.1127145284</td>\n",
       "      <td>jour.1103138</td>\n",
       "      <td>Nature Genetics</td>\n",
       "      <td>52</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>10.0</td>\n",
       "      <td>Elevated sorbitol underlies a heritable neurop...</td>\n",
       "      <td>2020</td>\n",
       "      <td>469-470</td>\n",
       "      <td>article</td>\n",
       "      <td>0</td>\n",
       "      <td>[[{'first_name': 'Eva', 'last_name': 'Morava',...</td>\n",
       "      <td>pub.1127348606</td>\n",
       "      <td>jour.1103138</td>\n",
       "      <td>Nature Genetics</td>\n",
       "      <td>52</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>12.0</td>\n",
       "      <td>Spt5-mediated enhancer transcription directly ...</td>\n",
       "      <td>2020</td>\n",
       "      <td>505-515</td>\n",
       "      <td>article</td>\n",
       "      <td>1</td>\n",
       "      <td>[[{'first_name': 'Johanna', 'last_name': 'Fitz...</td>\n",
       "      <td>pub.1126151817</td>\n",
       "      <td>jour.1103138</td>\n",
       "      <td>Nature Genetics</td>\n",
       "      <td>52</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>241.0</td>\n",
       "      <td>Identifying genetic variants underlying phenot...</td>\n",
       "      <td>2020</td>\n",
       "      <td>534-540</td>\n",
       "      <td>article</td>\n",
       "      <td>2</td>\n",
       "      <td>[[{'first_name': 'Yoav', 'last_name': 'Voichek...</td>\n",
       "      <td>pub.1126635876</td>\n",
       "      <td>jour.1103138</td>\n",
       "      <td>Nature Genetics</td>\n",
       "      <td>52</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>3.0</td>\n",
       "      <td>Enhancer–promoter interactions and transcription</td>\n",
       "      <td>2020</td>\n",
       "      <td>470-471</td>\n",
       "      <td>article</td>\n",
       "      <td>0</td>\n",
       "      <td>[[{'first_name': 'Douglas R.', 'last_name': 'H...</td>\n",
       "      <td>pub.1127392559</td>\n",
       "      <td>jour.1103138</td>\n",
       "      <td>Nature Genetics</td>\n",
       "      <td>52</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   altmetric                                              title  year  \\\n",
       "0        1.0  Publisher Correction: Comprehensive analysis o...  2020   \n",
       "1       14.0  Uncoupling histone H3K4 trimethylation from de...  2020   \n",
       "2       38.0  Evaluating two different models of peanut’s or...  2020   \n",
       "3        3.0  Reply to: Evaluating two different models of p...  2020   \n",
       "4      195.0  Genetic identification of cell types underlyin...  2020   \n",
       "5      193.0  Genome-wide association meta-analyses combinin...  2020   \n",
       "6       10.0  Elevated sorbitol underlies a heritable neurop...  2020   \n",
       "7       12.0  Spt5-mediated enhancer transcription directly ...  2020   \n",
       "8      241.0  Identifying genetic variants underlying phenot...  2020   \n",
       "9        3.0   Enhancer–promoter interactions and transcription  2020   \n",
       "\n",
       "     pages     type  times_cited  \\\n",
       "0      1-1  article            0   \n",
       "1     1-11  article            0   \n",
       "2      1-3  article            1   \n",
       "3      1-4  article            1   \n",
       "4  482-493  article            1   \n",
       "5  494-504  article            1   \n",
       "6  469-470  article            0   \n",
       "7  505-515  article            1   \n",
       "8  534-540  article            2   \n",
       "9  470-471  article            0   \n",
       "\n",
       "                                 author_affiliations              id  \\\n",
       "0  [[{'first_name': 'Isidro', 'last_name': 'Corté...  pub.1127548497   \n",
       "1  [[{'first_name': 'Delphine', 'last_name': 'Dou...  pub.1127504415   \n",
       "2  [[{'first_name': 'David J.', 'last_name': 'Ber...  pub.1127499311   \n",
       "3  [[{'first_name': 'Weijian', 'last_name': 'Zhua...  pub.1127503074   \n",
       "4  [[{'first_name': 'Julien', 'last_name': 'Bryoi...  pub.1127148454   \n",
       "5  [[{'first_name': 'Maria Teresa', 'last_name': ...  pub.1127145284   \n",
       "6  [[{'first_name': 'Eva', 'last_name': 'Morava',...  pub.1127348606   \n",
       "7  [[{'first_name': 'Johanna', 'last_name': 'Fitz...  pub.1126151817   \n",
       "8  [[{'first_name': 'Yoav', 'last_name': 'Voichek...  pub.1126635876   \n",
       "9  [[{'first_name': 'Douglas R.', 'last_name': 'H...  pub.1127392559   \n",
       "\n",
       "     journal.id    journal.title volume issue  \n",
       "0  jour.1103138  Nature Genetics    NaN   NaN  \n",
       "1  jour.1103138  Nature Genetics    NaN   NaN  \n",
       "2  jour.1103138  Nature Genetics    NaN   NaN  \n",
       "3  jour.1103138  Nature Genetics    NaN   NaN  \n",
       "4  jour.1103138  Nature Genetics     52     5  \n",
       "5  jour.1103138  Nature Genetics     52     5  \n",
       "6  jour.1103138  Nature Genetics     52     5  \n",
       "7  jour.1103138  Nature Genetics     52     5  \n",
       "8  jour.1103138  Nature Genetics     52     5  \n",
       "9  jour.1103138  Nature Genetics     52     5  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfpubs = pubs.as_dataframe()\n",
    "save(dfpubs,\"1_publications.csv\")\n",
    "# preview the publications \n",
    "dfpubs.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false",
    "colab_type": "text",
    "id": "aJSz9ltEo6D0"
   },
   "source": [
    "Extract the authors data "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "Collapsed": "false",
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1194
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 5007,
     "status": "ok",
     "timestamp": 1590004331909,
     "user": {
      "displayName": "Michele Pasin",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GiYfmLTPbeMuYDDrETLbTVXTXnfVr9f7eBtkmR73A=s64",
      "userId": "10309320684375994511"
     },
     "user_tz": -60
    },
    "id": "ihjtFg1pUofn",
    "outputId": "9eb0aec0-8a28-4e07-c847-1b140a5a7919"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>first_name</th>\n",
       "      <th>last_name</th>\n",
       "      <th>initials</th>\n",
       "      <th>corresponding</th>\n",
       "      <th>orcid</th>\n",
       "      <th>current_organization_id</th>\n",
       "      <th>researcher_id</th>\n",
       "      <th>affiliations</th>\n",
       "      <th>is_bogus</th>\n",
       "      <th>pub_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Isidro</td>\n",
       "      <td>Cortés-Ciriano</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>[{'id': 'grid.38142.3c', 'name': 'Harvard Univ...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>pub.1127548497</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Jake June-Koo</td>\n",
       "      <td>Lee</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>[{'id': 'grid.38142.3c', 'name': 'Harvard Univ...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>pub.1127548497</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Ruibin</td>\n",
       "      <td>Xi</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>[{'id': 'grid.11135.37', 'name': 'Peking Unive...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>pub.1127548497</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Dhawal</td>\n",
       "      <td>Jain</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>[{'id': 'grid.38142.3c', 'name': 'Harvard Univ...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>pub.1127548497</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Youngsook L.</td>\n",
       "      <td>Jung</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>[{'id': 'grid.38142.3c', 'name': 'Harvard Univ...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>pub.1127548497</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Lixing</td>\n",
       "      <td>Yang</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>[{'name': 'Ben May Department for Cancer Resea...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>pub.1127548497</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Dmitry</td>\n",
       "      <td>Gordenin</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>[{'id': 'grid.280664.e', 'name': 'National Ins...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>pub.1127548497</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Leszek J.</td>\n",
       "      <td>Klimczak</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>[{'id': 'grid.280664.e', 'name': 'National Ins...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>pub.1127548497</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Cheng-Zhong</td>\n",
       "      <td>Zhang</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>[{'id': 'grid.38142.3c', 'name': 'Harvard Univ...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>pub.1127548497</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>David S.</td>\n",
       "      <td>Pellman</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>[{'id': 'grid.65499.37', 'name': 'Dana-Farber ...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>pub.1127548497</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      first_name       last_name initials corresponding orcid  \\\n",
       "0         Isidro  Cortés-Ciriano                                \n",
       "1  Jake June-Koo             Lee                                \n",
       "2         Ruibin              Xi                                \n",
       "3         Dhawal            Jain                                \n",
       "4   Youngsook L.            Jung                                \n",
       "5         Lixing            Yang                                \n",
       "6         Dmitry        Gordenin                                \n",
       "7      Leszek J.        Klimczak                                \n",
       "8    Cheng-Zhong           Zhang                                \n",
       "9       David S.         Pellman                                \n",
       "\n",
       "  current_organization_id researcher_id  \\\n",
       "0                                         \n",
       "1                                         \n",
       "2                                         \n",
       "3                                         \n",
       "4                                         \n",
       "5                                         \n",
       "6                                         \n",
       "7                                         \n",
       "8                                         \n",
       "9                                         \n",
       "\n",
       "                                        affiliations is_bogus          pub_id  \n",
       "0  [{'id': 'grid.38142.3c', 'name': 'Harvard Univ...      NaN  pub.1127548497  \n",
       "1  [{'id': 'grid.38142.3c', 'name': 'Harvard Univ...      NaN  pub.1127548497  \n",
       "2  [{'id': 'grid.11135.37', 'name': 'Peking Unive...      NaN  pub.1127548497  \n",
       "3  [{'id': 'grid.38142.3c', 'name': 'Harvard Univ...      NaN  pub.1127548497  \n",
       "4  [{'id': 'grid.38142.3c', 'name': 'Harvard Univ...      NaN  pub.1127548497  \n",
       "5  [{'name': 'Ben May Department for Cancer Resea...      NaN  pub.1127548497  \n",
       "6  [{'id': 'grid.280664.e', 'name': 'National Ins...      NaN  pub.1127548497  \n",
       "7  [{'id': 'grid.280664.e', 'name': 'National Ins...      NaN  pub.1127548497  \n",
       "8  [{'id': 'grid.38142.3c', 'name': 'Harvard Univ...      NaN  pub.1127548497  \n",
       "9  [{'id': 'grid.65499.37', 'name': 'Dana-Farber ...      NaN  pub.1127548497  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# preview the authors data \n",
    "authors = pubs.as_dataframe_authors()\n",
    "save(authors,\"1_publications_authors.csv\")\n",
    "authors.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false",
    "colab_type": "text",
    "id": "QLkrxzT2o6D3"
   },
   "source": [
    "Extract the affiliations data "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "Collapsed": "false",
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 681
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 8888,
     "status": "ok",
     "timestamp": 1590004335794,
     "user": {
      "displayName": "Michele Pasin",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GiYfmLTPbeMuYDDrETLbTVXTXnfVr9f7eBtkmR73A=s64",
      "userId": "10309320684375994511"
     },
     "user_tz": -60
    },
    "id": "SsT078tTuhvX",
    "outputId": "e0a4e40d-b009-4f0c-a907-4e1623c13a93"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>aff_id</th>\n",
       "      <th>aff_name</th>\n",
       "      <th>aff_city</th>\n",
       "      <th>aff_city_id</th>\n",
       "      <th>aff_country</th>\n",
       "      <th>aff_country_code</th>\n",
       "      <th>aff_state</th>\n",
       "      <th>aff_state_code</th>\n",
       "      <th>pub_id</th>\n",
       "      <th>researcher_id</th>\n",
       "      <th>first_name</th>\n",
       "      <th>last_name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>grid.38142.3c</td>\n",
       "      <td>Harvard University</td>\n",
       "      <td>Cambridge</td>\n",
       "      <td>4.93197e+06</td>\n",
       "      <td>United States</td>\n",
       "      <td>US</td>\n",
       "      <td>Massachusetts</td>\n",
       "      <td>US-MA</td>\n",
       "      <td>pub.1127548497</td>\n",
       "      <td></td>\n",
       "      <td>Isidro</td>\n",
       "      <td>Cortés-Ciriano</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td></td>\n",
       "      <td>Ludwig Center at Harvard, Boston, MA, USA</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>pub.1127548497</td>\n",
       "      <td></td>\n",
       "      <td>Isidro</td>\n",
       "      <td>Cortés-Ciriano</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>grid.5335.0</td>\n",
       "      <td>University of Cambridge</td>\n",
       "      <td>Cambridge</td>\n",
       "      <td>2.65394e+06</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>GB</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>pub.1127548497</td>\n",
       "      <td></td>\n",
       "      <td>Isidro</td>\n",
       "      <td>Cortés-Ciriano</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>grid.225360.0</td>\n",
       "      <td>European Bioinformatics Institute</td>\n",
       "      <td>Cambridge</td>\n",
       "      <td>2.65394e+06</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>GB</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>pub.1127548497</td>\n",
       "      <td></td>\n",
       "      <td>Isidro</td>\n",
       "      <td>Cortés-Ciriano</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>grid.38142.3c</td>\n",
       "      <td>Harvard University</td>\n",
       "      <td>Cambridge</td>\n",
       "      <td>4.93197e+06</td>\n",
       "      <td>United States</td>\n",
       "      <td>US</td>\n",
       "      <td>Massachusetts</td>\n",
       "      <td>US-MA</td>\n",
       "      <td>pub.1127548497</td>\n",
       "      <td></td>\n",
       "      <td>Jake June-Koo</td>\n",
       "      <td>Lee</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td></td>\n",
       "      <td>Ludwig Center at Harvard, Boston, MA, USA</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>pub.1127548497</td>\n",
       "      <td></td>\n",
       "      <td>Jake June-Koo</td>\n",
       "      <td>Lee</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>grid.11135.37</td>\n",
       "      <td>Peking University</td>\n",
       "      <td>Beijing</td>\n",
       "      <td>1.81667e+06</td>\n",
       "      <td>China</td>\n",
       "      <td>CN</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>pub.1127548497</td>\n",
       "      <td></td>\n",
       "      <td>Ruibin</td>\n",
       "      <td>Xi</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>grid.38142.3c</td>\n",
       "      <td>Harvard University</td>\n",
       "      <td>Cambridge</td>\n",
       "      <td>4.93197e+06</td>\n",
       "      <td>United States</td>\n",
       "      <td>US</td>\n",
       "      <td>Massachusetts</td>\n",
       "      <td>US-MA</td>\n",
       "      <td>pub.1127548497</td>\n",
       "      <td></td>\n",
       "      <td>Dhawal</td>\n",
       "      <td>Jain</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>grid.38142.3c</td>\n",
       "      <td>Harvard University</td>\n",
       "      <td>Cambridge</td>\n",
       "      <td>4.93197e+06</td>\n",
       "      <td>United States</td>\n",
       "      <td>US</td>\n",
       "      <td>Massachusetts</td>\n",
       "      <td>US-MA</td>\n",
       "      <td>pub.1127548497</td>\n",
       "      <td></td>\n",
       "      <td>Youngsook L.</td>\n",
       "      <td>Jung</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td></td>\n",
       "      <td>Ben May Department for Cancer Research, Univer...</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>pub.1127548497</td>\n",
       "      <td></td>\n",
       "      <td>Lixing</td>\n",
       "      <td>Yang</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          aff_id                                           aff_name  \\\n",
       "0  grid.38142.3c                                 Harvard University   \n",
       "1                         Ludwig Center at Harvard, Boston, MA, USA   \n",
       "2    grid.5335.0                            University of Cambridge   \n",
       "3  grid.225360.0                  European Bioinformatics Institute   \n",
       "4  grid.38142.3c                                 Harvard University   \n",
       "5                         Ludwig Center at Harvard, Boston, MA, USA   \n",
       "6  grid.11135.37                                  Peking University   \n",
       "7  grid.38142.3c                                 Harvard University   \n",
       "8  grid.38142.3c                                 Harvard University   \n",
       "9                 Ben May Department for Cancer Research, Univer...   \n",
       "\n",
       "    aff_city  aff_city_id     aff_country aff_country_code      aff_state  \\\n",
       "0  Cambridge  4.93197e+06   United States               US  Massachusetts   \n",
       "1                                                                           \n",
       "2  Cambridge  2.65394e+06  United Kingdom               GB                  \n",
       "3  Cambridge  2.65394e+06  United Kingdom               GB                  \n",
       "4  Cambridge  4.93197e+06   United States               US  Massachusetts   \n",
       "5                                                                           \n",
       "6    Beijing  1.81667e+06           China               CN                  \n",
       "7  Cambridge  4.93197e+06   United States               US  Massachusetts   \n",
       "8  Cambridge  4.93197e+06   United States               US  Massachusetts   \n",
       "9                                                                           \n",
       "\n",
       "  aff_state_code          pub_id researcher_id     first_name       last_name  \n",
       "0          US-MA  pub.1127548497                       Isidro  Cortés-Ciriano  \n",
       "1                 pub.1127548497                       Isidro  Cortés-Ciriano  \n",
       "2                 pub.1127548497                       Isidro  Cortés-Ciriano  \n",
       "3                 pub.1127548497                       Isidro  Cortés-Ciriano  \n",
       "4          US-MA  pub.1127548497                Jake June-Koo             Lee  \n",
       "5                 pub.1127548497                Jake June-Koo             Lee  \n",
       "6                 pub.1127548497                       Ruibin              Xi  \n",
       "7          US-MA  pub.1127548497                       Dhawal            Jain  \n",
       "8          US-MA  pub.1127548497                 Youngsook L.            Jung  \n",
       "9                 pub.1127548497                       Lixing            Yang  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "affiliations = pubs.as_dataframe_authors_affiliations()\n",
    "save(affiliations,\"1_publications_affiliations.csv\")\n",
    "affiliations.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false",
    "colab_type": "text",
    "id": "8Tri9qhoCYH3"
   },
   "source": [
    "## Some stats about authors\n",
    "\n",
    "* count how many authors in total \n",
    "* count how many authors have a researcher ID\n",
    "* count how many unique researchers IDs we have in total"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "Collapsed": "false",
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 542
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 9231,
     "status": "ok",
     "timestamp": 1590004336142,
     "user": {
      "displayName": "Michele Pasin",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GiYfmLTPbeMuYDDrETLbTVXTXnfVr9f7eBtkmR73A=s64",
      "userId": "10309320684375994511"
     },
     "user_tz": -60
    },
    "id": "4k5V31MFRmdH",
    "outputId": "fa7662e9-f7fd-4df4-b119-9bee723ceb8f"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "alignmentgroup": "True",
         "hovertemplate": "measure=%{x}<br>count=%{y}<extra></extra>",
         "legendgroup": "",
         "marker": {
          "color": "#636efa"
         },
         "name": "",
         "offsetgroup": "",
         "orientation": "v",
         "showlegend": false,
         "textposition": "auto",
         "type": "bar",
         "x": [
          "Authors in total (non unique)",
          "Authors with a researcher ID",
          "Authors with a researcher ID (unique)"
         ],
         "xaxis": "x",
         "y": [
          43153,
          33377,
          18524
         ],
         "yaxis": "y"
        }
       ],
       "layout": {
        "autosize": true,
        "barmode": "relative",
        "legend": {
         "tracegroupgap": 0
        },
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "heatmapgl": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmapgl"
           }
          ],
          "histogram": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "text": "Author stats for Nature Genetics (from 2015)"
        },
        "xaxis": {
         "anchor": "y",
         "autorange": true,
         "domain": [
          0,
          1
         ],
         "range": [
          -0.5,
          2.5
         ],
         "title": {
          "text": "measure"
         },
         "type": "category"
        },
        "yaxis": {
         "anchor": "x",
         "autorange": true,
         "domain": [
          0,
          1
         ],
         "range": [
          0,
          45424.21052631579
         ],
         "title": {
          "text": "count"
         },
         "type": "linear"
        }
       }
      },
      "image/png": "",
      "text/html": [
       "<div>\n",
       "        \n",
       "        \n",
       "            <div id=\"8c68a23d-779d-4609-9919-27e3e981a544\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>\n",
       "            <script type=\"text/javascript\">\n",
       "                require([\"plotly\"], function(Plotly) {\n",
       "                    window.PLOTLYENV=window.PLOTLYENV || {};\n",
       "                    \n",
       "                if (document.getElementById(\"8c68a23d-779d-4609-9919-27e3e981a544\")) {\n",
       "                    Plotly.newPlot(\n",
       "                        '8c68a23d-779d-4609-9919-27e3e981a544',\n",
       "                        [{\"alignmentgroup\": \"True\", \"hovertemplate\": \"measure=%{x}<br>count=%{y}<extra></extra>\", \"legendgroup\": \"\", \"marker\": {\"color\": \"#636efa\"}, \"name\": \"\", \"offsetgroup\": \"\", \"orientation\": \"v\", \"showlegend\": false, \"textposition\": \"auto\", \"type\": \"bar\", \"x\": [\"Authors in total (non unique)\", \"Authors with a researcher ID\", \"Authors with a researcher ID (unique)\"], \"xaxis\": \"x\", \"y\": [43153, 33377, 18524], \"yaxis\": \"y\"}],\n",
       "                        {\"barmode\": \"relative\", \"legend\": {\"tracegroupgap\": 0}, \"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"pie\": [{\"automargin\": true, \"type\": \"pie\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"coloraxis\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}, \"title\": {\"text\": \"Author stats for Nature Genetics (from 2015)\"}, \"xaxis\": {\"anchor\": \"y\", \"domain\": [0.0, 1.0], \"title\": {\"text\": \"measure\"}}, \"yaxis\": {\"anchor\": \"x\", \"domain\": [0.0, 1.0], \"title\": {\"text\": \"count\"}}},\n",
       "                        {\"responsive\": true}\n",
       "                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('8c68a23d-779d-4609-9919-27e3e981a544');\n",
       "var x = new MutationObserver(function (mutations, observer) {{\n",
       "        var display = window.getComputedStyle(gd).display;\n",
       "        if (!display || display === 'none') {{\n",
       "            console.log([gd, 'removed!']);\n",
       "            Plotly.purge(gd);\n",
       "            observer.disconnect();\n",
       "        }}\n",
       "}});\n",
       "\n",
       "// Listen for the removal of the full notebook cells\n",
       "var notebookContainer = gd.closest('#notebook-container');\n",
       "if (notebookContainer) {{\n",
       "    x.observe(notebookContainer, {childList: true});\n",
       "}}\n",
       "\n",
       "// Listen for the clearing of the current output cell\n",
       "var outputEl = gd.closest('.output');\n",
       "if (outputEl) {{\n",
       "    x.observe(outputEl, {childList: true});\n",
       "}}\n",
       "\n",
       "                        })\n",
       "                };\n",
       "                });\n",
       "            </script>\n",
       "        </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "researchers = authors.query(\"researcher_id!=''\")\n",
    "#\n",
    "df = pd.DataFrame({\n",
    "    'measure' : ['Authors in total (non unique)', 'Authors with a researcher ID', 'Authors with a researcher ID (unique)'],\n",
    "    'count' : [len(authors), len(researchers), researchers['researcher_id'].nunique()],\n",
    "})\n",
    "px.bar(df, x=\"measure\", y=\"count\", title=f\"Author stats for {journal_title} (from {start_year})\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "Collapsed": "false",
    "colab": {},
    "colab_type": "code",
    "id": "bs2a6hzBRmdM"
   },
   "outputs": [],
   "source": [
    "# save the researchers data to a file\n",
    "save(researchers, \"1_authors_with_researchers_id.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false",
    "colab_type": "text",
    "id": "fJuPwNoORmdN"
   },
   "source": [
    "## A quick look at authors *without* a Dimensions Researcher ID\n",
    "\n",
    "We're not going to try to disambiguate them here, but still it's good to have a quick look at them... \n",
    "\n",
    "Looks like the most common surname is `Wang`, while the most common first name is an empty value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "Collapsed": "false",
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 172
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 9573,
     "status": "ok",
     "timestamp": 1590004336490,
     "user": {
      "displayName": "Michele Pasin",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GiYfmLTPbeMuYDDrETLbTVXTXnfVr9f7eBtkmR73A=s64",
      "userId": "10309320684375994511"
     },
     "user_tz": -60
    },
    "id": "Zh-u7ZN4RmdO",
    "outputId": "4ab12b2a-dabc-4cf8-f64d-9e85e0e6e086"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>first_name</th>\n",
       "      <th>last_name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>9776</td>\n",
       "      <td>9776</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>4280</td>\n",
       "      <td>4183</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>560</td>\n",
       "      <td>408</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       first_name last_name\n",
       "count        9776      9776\n",
       "unique       4280      4183\n",
       "top                        \n",
       "freq          560       408"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "authors_without_id = authors.query(\"researcher_id==''\")\n",
    "authors_without_id[['first_name', 'last_name']].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false",
    "colab_type": "text",
    "id": "17_9q8y1RmdP"
   },
   "source": [
    "Top Ten surnames seem all Chinese.. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "Collapsed": "false",
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 204
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 9567,
     "status": "ok",
     "timestamp": 1590004336491,
     "user": {
      "displayName": "Michele Pasin",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GiYfmLTPbeMuYDDrETLbTVXTXnfVr9f7eBtkmR73A=s64",
      "userId": "10309320684375994511"
     },
     "user_tz": -60
    },
    "id": "IO6R4sRARmdQ",
    "outputId": "9adfea21-5f69-4698-a8b9-e6b9fb2c3e61"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "         408\n",
       "Wang     183\n",
       "Li       148\n",
       "Zhang    148\n",
       "Liu      128\n",
       "Chen     108\n",
       "Yang      71\n",
       "Zhao      63\n",
       "Lee       57\n",
       "Kim       50\n",
       "Name: last_name, dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "authors_without_id['last_name'].value_counts()[:10]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false",
    "colab_type": "text",
    "id": "ivhKZPLsRmdS"
   },
   "source": [
    "### Any common patterns? \n",
    "\n",
    "If we try to group the data by name+surname we can see some interesting patterns \n",
    "\n",
    "* some entries are things which are not persons (presumably the results of bad source data in Dimensions, eg from the publisher) \n",
    "* there are some apparently meaningful name+surname combinations with a lot of hits\n",
    "* not many Chinese names in the top ones \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "Collapsed": "false",
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 901
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 9563,
     "status": "ok",
     "timestamp": 1590004336491,
     "user": {
      "displayName": "Michele Pasin",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GiYfmLTPbeMuYDDrETLbTVXTXnfVr9f7eBtkmR73A=s64",
      "userId": "10309320684375994511"
     },
     "user_tz": -60
    },
    "id": "VCkNdlWgRmdS",
    "outputId": "2ec4715d-0dc6-442c-a38a-6e9ef19344b6"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "first_name    last_name            \n",
       "                                       408\n",
       "Jaakko        Tuomilehto                13\n",
       "Wei           Zhao                      12\n",
       "James G.      Wilson                    12\n",
       "James P.      Cook                      11\n",
       "Olle          Melander                  11\n",
       "Qiong         Yang                      10\n",
       "Jie           Huang                     10\n",
       "Brooke        LaFlamme                  10\n",
       "Jouke-Jan     Hottenga                  10\n",
       "Kari          Stefansson                 9\n",
       "Andre         Franke                     9\n",
       "Ying          Wu                         9\n",
       "Andrew P.     Morris                     9\n",
       "Tõnu          Esko                       9\n",
       "Najaf         Amin                       9\n",
       "Daniela       Toniolo                    9\n",
       "Nicholas G.   Martin                     9\n",
       "Aarno         Palotie                    9\n",
       "Grant W.      Montgomery                 9\n",
       "Joanna M. M.  Howson                     9\n",
       "Wolfgang      Lieb                       9\n",
       "Lars          Lind                       9\n",
       "Ganesh        Chauhan                    8\n",
       "Charles       Kooperberg                 8\n",
       "David         Ellinghaus                 8\n",
       "André G.      Uitterlinden               8\n",
       "Yongmei       Liu                        8\n",
       "Peter         Vollenweider               8\n",
       "Manuel        Mattheisen                 8\n",
       "Weihua        Zhang                      8\n",
       "Albert V.     Smith                      8\n",
       "Peter         Almgren                    8\n",
       "Albert        Hofman                     8\n",
       "Matthias W    Beckmann                   7\n",
       "Jose C.       Florez                     7\n",
       "Andres        Metspalu                   7\n",
       "Leslie A.     Lange                      7\n",
       "Jie Jin       Wang                       7\n",
       "Jin           Li                         7\n",
       "Patrick F.    Sullivan                   7\n",
       "Yii-Der Ida   Chen                       6\n",
       "Frank         Kee                        6\n",
       "Cornelia M.   van Duijn                  6\n",
       "Jonathan      Beesley                    6\n",
       "James J       Lee                        6\n",
       "              23andMe Research Team      6\n",
       "Rajesh        Rawal                      6\n",
       "Jing Hua      Zhao                       6\n",
       "Scott D.      Gordon                     6\n",
       "dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test = authors_without_id.groupby([\"first_name\", \"last_name\"]).size()\n",
    "test.sort_values(ascending=False, inplace=True)\n",
    "test.head(50)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false",
    "colab_type": "text",
    "id": "dqxFegeLRmdW"
   },
   "source": [
    "### Creating an export for manual curation\n",
    "\n",
    "For the next tasks, we will focus on the disambiguated authors as the Researcher ID links will let us carry out useful analyses.\n",
    "\n",
    "Still, we can **save the authors with missing IDs** results and try to do some manual disambiguation later. To this end, adding a simple google-search URL can help in making sense of these data quickly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "Collapsed": "false",
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 508
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 9890,
     "status": "ok",
     "timestamp": 1590004336822,
     "user": {
      "displayName": "Michele Pasin",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GiYfmLTPbeMuYDDrETLbTVXTXnfVr9f7eBtkmR73A=s64",
      "userId": "10309320684375994511"
     },
     "user_tz": -60
    },
    "id": "cC__pj51RmdW",
    "outputId": "da9b33b0-1cf5-4a3c-9d5e-4c5a95b3fa28"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>surname</th>\n",
       "      <th>frequency</th>\n",
       "      <th>search_url</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>408</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Jaakko</td>\n",
       "      <td>Tuomilehto</td>\n",
       "      <td>13</td>\n",
       "      <td>https://www.google.com/search?q=Jaakko+Tuomilehto</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Wei</td>\n",
       "      <td>Zhao</td>\n",
       "      <td>12</td>\n",
       "      <td>https://www.google.com/search?q=Wei+Zhao</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>James G.</td>\n",
       "      <td>Wilson</td>\n",
       "      <td>12</td>\n",
       "      <td>https://www.google.com/search?q=James%20G.+Wilson</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>James P.</td>\n",
       "      <td>Cook</td>\n",
       "      <td>11</td>\n",
       "      <td>https://www.google.com/search?q=James%20P.+Cook</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Olle</td>\n",
       "      <td>Melander</td>\n",
       "      <td>11</td>\n",
       "      <td>https://www.google.com/search?q=Olle+Melander</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Qiong</td>\n",
       "      <td>Yang</td>\n",
       "      <td>10</td>\n",
       "      <td>https://www.google.com/search?q=Qiong+Yang</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Jie</td>\n",
       "      <td>Huang</td>\n",
       "      <td>10</td>\n",
       "      <td>https://www.google.com/search?q=Jie+Huang</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Brooke</td>\n",
       "      <td>LaFlamme</td>\n",
       "      <td>10</td>\n",
       "      <td>https://www.google.com/search?q=Brooke+LaFlamme</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Jouke-Jan</td>\n",
       "      <td>Hottenga</td>\n",
       "      <td>10</td>\n",
       "      <td>https://www.google.com/search?q=Jouke-Jan+Hott...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Kari</td>\n",
       "      <td>Stefansson</td>\n",
       "      <td>9</td>\n",
       "      <td>https://www.google.com/search?q=Kari+Stefansson</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Andre</td>\n",
       "      <td>Franke</td>\n",
       "      <td>9</td>\n",
       "      <td>https://www.google.com/search?q=Andre+Franke</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Ying</td>\n",
       "      <td>Wu</td>\n",
       "      <td>9</td>\n",
       "      <td>https://www.google.com/search?q=Ying+Wu</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Andrew P.</td>\n",
       "      <td>Morris</td>\n",
       "      <td>9</td>\n",
       "      <td>https://www.google.com/search?q=Andrew%20P.+Mo...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Tõnu</td>\n",
       "      <td>Esko</td>\n",
       "      <td>9</td>\n",
       "      <td>https://www.google.com/search?q=T%C3%B5nu+Esko</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Najaf</td>\n",
       "      <td>Amin</td>\n",
       "      <td>9</td>\n",
       "      <td>https://www.google.com/search?q=Najaf+Amin</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Daniela</td>\n",
       "      <td>Toniolo</td>\n",
       "      <td>9</td>\n",
       "      <td>https://www.google.com/search?q=Daniela+Toniolo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Nicholas G.</td>\n",
       "      <td>Martin</td>\n",
       "      <td>9</td>\n",
       "      <td>https://www.google.com/search?q=Nicholas%20G.+...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Aarno</td>\n",
       "      <td>Palotie</td>\n",
       "      <td>9</td>\n",
       "      <td>https://www.google.com/search?q=Aarno+Palotie</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Grant W.</td>\n",
       "      <td>Montgomery</td>\n",
       "      <td>9</td>\n",
       "      <td>https://www.google.com/search?q=Grant%20W.+Mon...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           name     surname  frequency  \\\n",
       "0                                  408   \n",
       "1        Jaakko  Tuomilehto         13   \n",
       "2           Wei        Zhao         12   \n",
       "3      James G.      Wilson         12   \n",
       "4      James P.        Cook         11   \n",
       "5          Olle    Melander         11   \n",
       "6         Qiong        Yang         10   \n",
       "7           Jie       Huang         10   \n",
       "8        Brooke    LaFlamme         10   \n",
       "9     Jouke-Jan    Hottenga         10   \n",
       "10         Kari  Stefansson          9   \n",
       "11        Andre      Franke          9   \n",
       "12         Ying          Wu          9   \n",
       "13    Andrew P.      Morris          9   \n",
       "14         Tõnu        Esko          9   \n",
       "15        Najaf        Amin          9   \n",
       "16      Daniela     Toniolo          9   \n",
       "17  Nicholas G.      Martin          9   \n",
       "18        Aarno     Palotie          9   \n",
       "19     Grant W.  Montgomery          9   \n",
       "\n",
       "                                           search_url  \n",
       "0                                                      \n",
       "1   https://www.google.com/search?q=Jaakko+Tuomilehto  \n",
       "2            https://www.google.com/search?q=Wei+Zhao  \n",
       "3   https://www.google.com/search?q=James%20G.+Wilson  \n",
       "4     https://www.google.com/search?q=James%20P.+Cook  \n",
       "5       https://www.google.com/search?q=Olle+Melander  \n",
       "6          https://www.google.com/search?q=Qiong+Yang  \n",
       "7           https://www.google.com/search?q=Jie+Huang  \n",
       "8     https://www.google.com/search?q=Brooke+LaFlamme  \n",
       "9   https://www.google.com/search?q=Jouke-Jan+Hott...  \n",
       "10    https://www.google.com/search?q=Kari+Stefansson  \n",
       "11       https://www.google.com/search?q=Andre+Franke  \n",
       "12            https://www.google.com/search?q=Ying+Wu  \n",
       "13  https://www.google.com/search?q=Andrew%20P.+Mo...  \n",
       "14     https://www.google.com/search?q=T%C3%B5nu+Esko  \n",
       "15         https://www.google.com/search?q=Najaf+Amin  \n",
       "16    https://www.google.com/search?q=Daniela+Toniolo  \n",
       "17  https://www.google.com/search?q=Nicholas%20G.+...  \n",
       "18      https://www.google.com/search?q=Aarno+Palotie  \n",
       "19  https://www.google.com/search?q=Grant%20W.+Mon...  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from urllib.parse import quote\n",
    "\n",
    "out = []\n",
    "for index, value in test.items():\n",
    "    # compose a simple URL of the form 'https://www.google.com/search?q=tonu+esko'\n",
    "    if index[0] or index[1]:\n",
    "        n, s = quote(index[0]), quote(index[1])\n",
    "        url = f\"https://www.google.com/search?q={n}+{s}\"\n",
    "    else:\n",
    "        url = \"\"\n",
    "    d = {'name': index[0] , 'surname' : index[1] , 'frequency' : value , 'search_url' : url }\n",
    "    out.append(d)\n",
    "\n",
    "authors_follow_up = pd.DataFrame.from_dict(out)\n",
    "# set order of columns\n",
    "authors_follow_up = authors_follow_up[['name', 'surname', 'frequency', 'search_url']]\n",
    "\n",
    "authors_follow_up.head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "Collapsed": "false",
    "colab": {},
    "colab_type": "code",
    "id": "xQFQTOPOWm_T"
   },
   "outputs": [],
   "source": [
    "# save the data\n",
    "save(authors_follow_up, \"1_authors_without_researchers_id.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false",
    "colab_type": "text",
    "id": "Y9cYfZJZRmdY"
   },
   "source": [
    "That's it! \n",
    "\n",
    "Now let's go and open this in [Google Sheets](https://docs.google.com/spreadsheets/)..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "Collapsed": "false",
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 9303,
     "status": "ok",
     "timestamp": 1590004531476,
     "user": {
      "displayName": "Michele Pasin",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GiYfmLTPbeMuYDDrETLbTVXTXnfVr9f7eBtkmR73A=s64",
      "userId": "10309320684375994511"
     },
     "user_tz": -60
    },
    "id": "pt8y3YXAo6EM",
    "outputId": "18b6b189-f5f3-4290-ed40-662184d36525"
   },
   "outputs": [],
   "source": [
    "# for colab users: download everything\n",
    "if COLAB_ENV:\n",
    "    from google.colab import auth\n",
    "    auth.authenticate_user()\n",
    "\n",
    "    import gspread\n",
    "    from gspread_dataframe import get_as_dataframe, set_with_dataframe\n",
    "    from oauth2client.client import GoogleCredentials\n",
    "\n",
    "    gc = gspread.authorize(GoogleCredentials.get_application_default())\n",
    "\n",
    "    title = 'Authors_without_IDs'\n",
    "    sh = gc.create(title)\n",
    "    worksheet = gc.open(title).sheet1\n",
    "    set_with_dataframe(worksheet, authors_follow_up)\n",
    "    spreadsheet_url = \"https://docs.google.com/spreadsheets/d/%s\" % sh.id\n",
    "    print(spreadsheet_url)"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [],
   "name": "Journal-Profile-1-Gathering-data.ipynb",
   "provenance": [],
   "toc_visible": true
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
