{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false",
    "colab_type": "text",
    "id": "eV50UGicGoXz"
   },
   "source": [
    "# Citation Analysis: an Introduction\n",
    "\n",
    "This notebooks shows how to extract citations data using the Dimensions Analytics API. \n",
    "\n",
    "Two approaches are considered: one that is most suited for smaller analyses, and one which is more query-efficient and hence is more suited for analyses involving lots of publications."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false",
    "colab_type": "text",
    "id": "hMaQlB7DG8Vw"
   },
   "source": [
    "## Prerequisites\n",
    "\n",
    "This notebook assumes you have installed the [Dimcli](https://pypi.org/project/dimcli/) library and are familiar with the *Getting Started* tutorial.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==\n",
      "Logging in..\n",
      "\u001b[2mDimcli - Dimensions API Client (v0.8.2)\u001b[0m\n",
      "\u001b[2mConnected to: https://app.dimensions.ai - DSL v1.28\u001b[0m\n",
      "\u001b[2mMethod: dsl.ini file\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "!pip install dimcli pyvis -U --quiet \n",
    "\n",
    "import dimcli\n",
    "from dimcli.utils import *\n",
    "import os, sys, time, json\n",
    "\n",
    "print(\"==\\nLogging in..\")\n",
    "# https://digital-science.github.io/dimcli/getting-started.html#authentication\n",
    "ENDPOINT = \"https://app.dimensions.ai\"\n",
    "if 'google.colab' in sys.modules:\n",
    "  import getpass\n",
    "  KEY = getpass.getpass(prompt='API Key: ')  \n",
    "  dimcli.login(KEY, ENDPOINT)\n",
    "else:\n",
    "  KEY = \"\"\n",
    "  dimcli.login(KEY, ENDPOINT)\n",
    "dsl = dimcli.Dsl()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false",
    "colab_type": "text",
    "id": "ykHU1pbE9uXt"
   },
   "source": [
    "## Method A: getting citations for one publication at a time\n",
    "\n",
    "By using the field `reference_ids` we can easily look up citations for individual publications (= incoming links). For example, here are the papers citing \"pub.1053279155\":"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "Collapsed": "false",
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 242
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 891,
     "status": "ok",
     "timestamp": 1571735489179,
     "user": {
      "displayName": "Michele Pasin",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AAuE7mBu8LVjIGgontF2Wax51BoL5KFx8esezX3bUmaa0g=s64",
      "userId": "10309320684375994511"
     },
     "user_tz": -60
    },
    "id": "wU5PDBEw-MRN",
    "outputId": "53662bb2-2615-4a46-d4c0-712aa6421d55"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Returned Publications: 5 (total = 5)\n",
      "\u001b[2mTime: 0.47s\u001b[0m\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>year</th>\n",
       "      <th>doi</th>\n",
       "      <th>id</th>\n",
       "      <th>title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2018</td>\n",
       "      <td>10.1007/s11227-018-2338-1</td>\n",
       "      <td>pub.1103275659</td>\n",
       "      <td>Towards ontology-based multilingual URL filter...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015</td>\n",
       "      <td>10.1515/iwp-2015-0057</td>\n",
       "      <td>pub.1012651711</td>\n",
       "      <td>Das Experteninterview als zentrale Methode der...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2015</td>\n",
       "      <td>10.1007/978-3-319-24129-6_3</td>\n",
       "      <td>pub.1005502446</td>\n",
       "      <td>Challenges for Ontological Engineering in the ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2012</td>\n",
       "      <td>10.1007/978-3-642-24809-2_10</td>\n",
       "      <td>pub.1008922470</td>\n",
       "      <td>Transforming a Flat Metadata Schema to a Seman...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2011</td>\n",
       "      <td>10.1007/978-3-642-24731-6_38</td>\n",
       "      <td>pub.1053157726</td>\n",
       "      <td>Practice-Based Ontologies: A New Approach to A...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   year                           doi              id  \\\n",
       "0  2018     10.1007/s11227-018-2338-1  pub.1103275659   \n",
       "1  2015         10.1515/iwp-2015-0057  pub.1012651711   \n",
       "2  2015   10.1007/978-3-319-24129-6_3  pub.1005502446   \n",
       "3  2012  10.1007/978-3-642-24809-2_10  pub.1008922470   \n",
       "4  2011  10.1007/978-3-642-24731-6_38  pub.1053157726   \n",
       "\n",
       "                                               title  \n",
       "0  Towards ontology-based multilingual URL filter...  \n",
       "1  Das Experteninterview als zentrale Methode der...  \n",
       "2  Challenges for Ontological Engineering in the ...  \n",
       "3  Transforming a Flat Metadata Schema to a Seman...  \n",
       "4  Practice-Based Ontologies: A New Approach to A...  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%dsldf search publications where reference_ids in [ \"pub.1053279155\" ] return publications[id+doi+title+year]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false",
    "colab_type": "text",
    "id": "SXKXmGM9C0q5"
   },
   "source": [
    "Let's try another paper ie \"pub.1103275659\" - in this case there are 3 citations "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "Collapsed": "false",
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 168
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 1029,
     "status": "ok",
     "timestamp": 1571735496705,
     "user": {
      "displayName": "Michele Pasin",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AAuE7mBu8LVjIGgontF2Wax51BoL5KFx8esezX3bUmaa0g=s64",
      "userId": "10309320684375994511"
     },
     "user_tz": -60
    },
    "id": "I7kDbaE9-n95",
    "outputId": "34a21100-ae2a-48b7-da0c-0d8a5a6b98f0"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Returned Publications: 7 (total = 7)\n",
      "\u001b[2mTime: 0.49s\u001b[0m\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>doi</th>\n",
       "      <th>year</th>\n",
       "      <th>id</th>\n",
       "      <th>title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10.1016/j.childyouth.2020.105134</td>\n",
       "      <td>2020</td>\n",
       "      <td>pub.1128314811</td>\n",
       "      <td>Cyber parental control: A bibliometric study</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10.1007/s11042-020-08764-2</td>\n",
       "      <td>2020</td>\n",
       "      <td>pub.1125691748</td>\n",
       "      <td>OBAC: towards agent-based identification and c...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10.1155/2020/8545128</td>\n",
       "      <td>2020</td>\n",
       "      <td>pub.1125056530</td>\n",
       "      <td>Calculating Trust Using Multiple Heterogeneous...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10.1016/j.future.2019.04.038</td>\n",
       "      <td>2019</td>\n",
       "      <td>pub.1113878770</td>\n",
       "      <td>Perception layer security in Internet of Things</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10.1109/access.2019.2918196</td>\n",
       "      <td>2019</td>\n",
       "      <td>pub.1115224509</td>\n",
       "      <td>Spammer Detection and Fake User Identification...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>10.1109/isncc.2018.8530984</td>\n",
       "      <td>2018</td>\n",
       "      <td>pub.1109815383</td>\n",
       "      <td>A Fault Tolerant Approach for Malicious URL Fi...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>10.1109/access.2018.2872928</td>\n",
       "      <td>2018</td>\n",
       "      <td>pub.1107354292</td>\n",
       "      <td>Social Internet of Vehicles: Complexity, Adapt...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                doi  year              id  \\\n",
       "0  10.1016/j.childyouth.2020.105134  2020  pub.1128314811   \n",
       "1        10.1007/s11042-020-08764-2  2020  pub.1125691748   \n",
       "2              10.1155/2020/8545128  2020  pub.1125056530   \n",
       "3      10.1016/j.future.2019.04.038  2019  pub.1113878770   \n",
       "4       10.1109/access.2019.2918196  2019  pub.1115224509   \n",
       "5        10.1109/isncc.2018.8530984  2018  pub.1109815383   \n",
       "6       10.1109/access.2018.2872928  2018  pub.1107354292   \n",
       "\n",
       "                                               title  \n",
       "0       Cyber parental control: A bibliometric study  \n",
       "1  OBAC: towards agent-based identification and c...  \n",
       "2  Calculating Trust Using Multiple Heterogeneous...  \n",
       "3    Perception layer security in Internet of Things  \n",
       "4  Spammer Detection and Fake User Identification...  \n",
       "5  A Fault Tolerant Approach for Malicious URL Fi...  \n",
       "6  Social Internet of Vehicles: Complexity, Adapt...  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%dsldf search publications where reference_ids in [ \"pub.1103275659\" ] return publications[id+doi+title+year]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false",
    "colab_type": "text",
    "id": "0UoK9zofpeVH"
   },
   "source": [
    "Using this simple approach, if we start with a list of publications (our 'seed') we can set up a simple loop to get through all of them and launch a 'get-citations' query each time. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false",
    "colab_type": "text",
    "id": "6pMkMe6jGsj8"
   },
   "source": [
    "TIP \n",
    "The `json.dumps` function easily transforms a list of objects into a string which can be used directly in our query eg\n",
    "\n",
    "```\n",
    "> json.dumps(seed)\n",
    "'[\"pub.1053279155\", \"pub.1103275659\"]'\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "Collapsed": "false",
    "colab": {},
    "colab_type": "code",
    "id": "Qp7iP4FBpaEO"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Returned Publications: 5 (total = 5)\n",
      "\u001b[2mTime: 0.46s\u001b[0m\n",
      "Returned Publications: 7 (total = 7)\n",
      "\u001b[2mTime: 0.47s\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "seed = [ \"pub.1053279155\" , \"pub.1103275659\"]\n",
    "q = \"\"\"search publications where reference_ids in [{}] return publications[id+doi+title+year]\"\"\"\n",
    "results = {}\n",
    "for p in seed:\n",
    "  data = dsl.query(q.format(json.dumps(p)))\n",
    "  results[p] = [x['id'] for x in data.publications]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "Collapsed": "false",
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 119
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 646,
     "status": "ok",
     "timestamp": 1571735531480,
     "user": {
      "displayName": "Michele Pasin",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AAuE7mBu8LVjIGgontF2Wax51BoL5KFx8esezX3bUmaa0g=s64",
      "userId": "10309320684375994511"
     },
     "user_tz": -60
    },
    "id": "MST81jAqqHvA",
    "outputId": "fd2f5e5d-3064-4642-fd4f-65c8dc456940"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'pub.1053279155': ['pub.1103275659',\n",
       "  'pub.1012651711',\n",
       "  'pub.1005502446',\n",
       "  'pub.1008922470',\n",
       "  'pub.1053157726'],\n",
       " 'pub.1103275659': ['pub.1128314811',\n",
       "  'pub.1125691748',\n",
       "  'pub.1125056530',\n",
       "  'pub.1113878770',\n",
       "  'pub.1115224509',\n",
       "  'pub.1109815383',\n",
       "  'pub.1107354292']}"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false",
    "colab_type": "text",
    "id": "y5dPmfV6qn7Y"
   },
   "source": [
    "### Comments about this method\n",
    "\n",
    "* this approach is straightforward and quick, but it's better used with small datasets  \n",
    "* we create one query per publication (and so on, for a N-degree network)\n",
    "* if you have lots of publicaitons, it'll lead to lots of queries which may not be too efficient\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false",
    "colab_type": "text",
    "id": "hog-cAHvDGNF"
   },
   "source": [
    "## Method B: Getting citations for multiple publications via a single query\n",
    "\n",
    "We can use the same query template but instead of looking for a single publication ID, we can put multiple ones in a list. \n",
    "\n",
    "So if we combine the two citations list for \"pub.1053279155\" and \"pub.1103275659\", we will get 5 + 3 = 8 results in total. \n",
    "\n",
    "*However* then it's down to us to figure out which paper is citing which!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "Collapsed": "false",
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 273
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 686,
     "status": "ok",
     "timestamp": 1571742733747,
     "user": {
      "displayName": "Michele Pasin",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AAuE7mBu8LVjIGgontF2Wax51BoL5KFx8esezX3bUmaa0g=s64",
      "userId": "10309320684375994511"
     },
     "user_tz": -60
    },
    "id": "8mXAAjZ4-oPa",
    "outputId": "d22ff995-020a-4370-843b-97fdd37ea5bb"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Returned Publications: 12 (total = 12)\n",
      "\u001b[2mTime: 0.50s\u001b[0m\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>year</th>\n",
       "      <th>id</th>\n",
       "      <th>doi</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Cyber parental control: A bibliometric study</td>\n",
       "      <td>2020</td>\n",
       "      <td>pub.1128314811</td>\n",
       "      <td>10.1016/j.childyouth.2020.105134</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>OBAC: towards agent-based identification and c...</td>\n",
       "      <td>2020</td>\n",
       "      <td>pub.1125691748</td>\n",
       "      <td>10.1007/s11042-020-08764-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Calculating Trust Using Multiple Heterogeneous...</td>\n",
       "      <td>2020</td>\n",
       "      <td>pub.1125056530</td>\n",
       "      <td>10.1155/2020/8545128</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Perception layer security in Internet of Things</td>\n",
       "      <td>2019</td>\n",
       "      <td>pub.1113878770</td>\n",
       "      <td>10.1016/j.future.2019.04.038</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Spammer Detection and Fake User Identification...</td>\n",
       "      <td>2019</td>\n",
       "      <td>pub.1115224509</td>\n",
       "      <td>10.1109/access.2019.2918196</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Towards ontology-based multilingual URL filter...</td>\n",
       "      <td>2018</td>\n",
       "      <td>pub.1103275659</td>\n",
       "      <td>10.1007/s11227-018-2338-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>A Fault Tolerant Approach for Malicious URL Fi...</td>\n",
       "      <td>2018</td>\n",
       "      <td>pub.1109815383</td>\n",
       "      <td>10.1109/isncc.2018.8530984</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Social Internet of Vehicles: Complexity, Adapt...</td>\n",
       "      <td>2018</td>\n",
       "      <td>pub.1107354292</td>\n",
       "      <td>10.1109/access.2018.2872928</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Das Experteninterview als zentrale Methode der...</td>\n",
       "      <td>2015</td>\n",
       "      <td>pub.1012651711</td>\n",
       "      <td>10.1515/iwp-2015-0057</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Challenges for Ontological Engineering in the ...</td>\n",
       "      <td>2015</td>\n",
       "      <td>pub.1005502446</td>\n",
       "      <td>10.1007/978-3-319-24129-6_3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Transforming a Flat Metadata Schema to a Seman...</td>\n",
       "      <td>2012</td>\n",
       "      <td>pub.1008922470</td>\n",
       "      <td>10.1007/978-3-642-24809-2_10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Practice-Based Ontologies: A New Approach to A...</td>\n",
       "      <td>2011</td>\n",
       "      <td>pub.1053157726</td>\n",
       "      <td>10.1007/978-3-642-24731-6_38</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                title  year              id  \\\n",
       "0        Cyber parental control: A bibliometric study  2020  pub.1128314811   \n",
       "1   OBAC: towards agent-based identification and c...  2020  pub.1125691748   \n",
       "2   Calculating Trust Using Multiple Heterogeneous...  2020  pub.1125056530   \n",
       "3     Perception layer security in Internet of Things  2019  pub.1113878770   \n",
       "4   Spammer Detection and Fake User Identification...  2019  pub.1115224509   \n",
       "5   Towards ontology-based multilingual URL filter...  2018  pub.1103275659   \n",
       "6   A Fault Tolerant Approach for Malicious URL Fi...  2018  pub.1109815383   \n",
       "7   Social Internet of Vehicles: Complexity, Adapt...  2018  pub.1107354292   \n",
       "8   Das Experteninterview als zentrale Methode der...  2015  pub.1012651711   \n",
       "9   Challenges for Ontological Engineering in the ...  2015  pub.1005502446   \n",
       "10  Transforming a Flat Metadata Schema to a Seman...  2012  pub.1008922470   \n",
       "11  Practice-Based Ontologies: A New Approach to A...  2011  pub.1053157726   \n",
       "\n",
       "                                 doi  \n",
       "0   10.1016/j.childyouth.2020.105134  \n",
       "1         10.1007/s11042-020-08764-2  \n",
       "2               10.1155/2020/8545128  \n",
       "3       10.1016/j.future.2019.04.038  \n",
       "4        10.1109/access.2019.2918196  \n",
       "5          10.1007/s11227-018-2338-1  \n",
       "6         10.1109/isncc.2018.8530984  \n",
       "7        10.1109/access.2018.2872928  \n",
       "8              10.1515/iwp-2015-0057  \n",
       "9        10.1007/978-3-319-24129-6_3  \n",
       "10      10.1007/978-3-642-24809-2_10  \n",
       "11      10.1007/978-3-642-24731-6_38  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%dsldf search publications where reference_ids in [ \"pub.1053279155\" , \"pub.1103275659\"] return publications[id+doi+title+year]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false",
    "colab_type": "text",
    "id": "gIBXDJ1GF8bC"
   },
   "source": [
    "In order to resolve the citations data we got above, we must also extract the full references for each citing paper (by including `reference_ids` in the results) and then recreate the citation graph programmatically. EG"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "Collapsed": "false",
    "colab": {},
    "colab_type": "code",
    "id": "gCZ48gcyGZoK"
   },
   "outputs": [],
   "source": [
    "seed = [ \"pub.1053279155\" , \"pub.1103275659\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "Collapsed": "false",
    "colab": {},
    "colab_type": "code",
    "id": "UXdacZ0h-oIq"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Returned Publications: 12 (total = 12)\n",
      "\u001b[2mTime: 0.65s\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "data = dsl.query(f\"\"\"search publications where reference_ids in {json.dumps(seed)} return publications[id+doi+title+year+reference_ids]\"\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "Collapsed": "false",
    "colab": {},
    "colab_type": "code",
    "id": "UoF3BAueNpXS"
   },
   "outputs": [],
   "source": [
    "def build_network_dict(seed, pubs_list):\n",
    "  network={x:[] for x in seed} # seed a dictionary \n",
    "  for pub in pubs_list:\n",
    "    for key in network:\n",
    "      if pub.get('reference_ids') and key in pub['reference_ids']:\n",
    "        network[key].append(pub['id'])\n",
    "  return network"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false",
    "colab_type": "text",
    "id": "pCB2LctcLN02"
   },
   "source": [
    "A simple way to represent the citation network is a dictionary data structure with `'cited_paper' : [citing papers]`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "Collapsed": "false",
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 119
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 485,
     "status": "ok",
     "timestamp": 1571735737325,
     "user": {
      "displayName": "Michele Pasin",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AAuE7mBu8LVjIGgontF2Wax51BoL5KFx8esezX3bUmaa0g=s64",
      "userId": "10309320684375994511"
     },
     "user_tz": -60
    },
    "id": "RLdMc3ppINxp",
    "outputId": "3599d791-5b6b-47b7-88f9-a8e20f344812"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'pub.1053279155': ['pub.1103275659',\n",
       "  'pub.1012651711',\n",
       "  'pub.1005502446',\n",
       "  'pub.1008922470',\n",
       "  'pub.1053157726'],\n",
       " 'pub.1103275659': ['pub.1128314811',\n",
       "  'pub.1125691748',\n",
       "  'pub.1125056530',\n",
       "  'pub.1113878770',\n",
       "  'pub.1115224509',\n",
       "  'pub.1109815383',\n",
       "  'pub.1107354292']}"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "network1 = build_network_dict(seed, data.publications)\n",
    "network1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false",
    "colab_type": "text",
    "id": "Eo_2nBQJJBVg"
   },
   "source": [
    "## Creating a second-level citations network\n",
    "\n",
    "Let's now create a second level citations network!\n",
    "\n",
    "This means going through all pubs citing the two seed-papers, and getting all the citing publications for them as well. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "Collapsed": "false",
    "colab": {},
    "colab_type": "code",
    "id": "lEi_hNomBOeN"
   },
   "outputs": [],
   "source": [
    "all_citing_papers = []\n",
    "for x in network1.values():\n",
    "  all_citing_papers += x\n",
    "all_citing_papers = list(set(all_citing_papers))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "Collapsed": "false",
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 153
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 490,
     "status": "ok",
     "timestamp": 1571735775957,
     "user": {
      "displayName": "Michele Pasin",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AAuE7mBu8LVjIGgontF2Wax51BoL5KFx8esezX3bUmaa0g=s64",
      "userId": "10309320684375994511"
     },
     "user_tz": -60
    },
    "id": "jkU5RZUCAt45",
    "outputId": "f0d0c67b-6472-4e68-cf75-bd079f7e66f5"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['pub.1115224509',\n",
       " 'pub.1012651711',\n",
       " 'pub.1053157726',\n",
       " 'pub.1005502446',\n",
       " 'pub.1008922470',\n",
       " 'pub.1125691748',\n",
       " 'pub.1125056530',\n",
       " 'pub.1103275659',\n",
       " 'pub.1128314811',\n",
       " 'pub.1113878770',\n",
       " 'pub.1109815383',\n",
       " 'pub.1107354292']"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_citing_papers"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false",
    "colab_type": "text",
    "id": "D-MSRNR2LRd5"
   },
   "source": [
    "Now let's extract the network structure as previously done"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "Collapsed": "false",
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 323
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 481,
     "status": "ok",
     "timestamp": 1571735794859,
     "user": {
      "displayName": "Michele Pasin",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AAuE7mBu8LVjIGgontF2Wax51BoL5KFx8esezX3bUmaa0g=s64",
      "userId": "10309320684375994511"
     },
     "user_tz": -60
    },
    "id": "I4DiWaZpNX8d",
    "outputId": "b4146bd2-63ee-4411-bee8-6934d3534679"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Returned Publications: 20 (total = 66)\n",
      "\u001b[2mTime: 1.20s\u001b[0m\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'pub.1115224509': ['pub.1130502573',\n",
       "  'pub.1129513039',\n",
       "  'pub.1130518902',\n",
       "  'pub.1129302386',\n",
       "  'pub.1117695595',\n",
       "  'pub.1126679217'],\n",
       " 'pub.1012651711': ['pub.1130168753'],\n",
       " 'pub.1053157726': [],\n",
       " 'pub.1005502446': [],\n",
       " 'pub.1008922470': [],\n",
       " 'pub.1125691748': ['pub.1129412317'],\n",
       " 'pub.1125056530': [],\n",
       " 'pub.1103275659': ['pub.1128314811'],\n",
       " 'pub.1128314811': [],\n",
       " 'pub.1113878770': ['pub.1127814760',\n",
       "  'pub.1128444159',\n",
       "  'pub.1129925269',\n",
       "  'pub.1127416559',\n",
       "  'pub.1127173019',\n",
       "  'pub.1128794002',\n",
       "  'pub.1129698755',\n",
       "  'pub.1129698601',\n",
       "  'pub.1127252959'],\n",
       " 'pub.1109815383': [],\n",
       " 'pub.1107354292': ['pub.1127855566', 'pub.1128759793']}"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data2 = dsl.query(f\"\"\"search publications where reference_ids in {json.dumps(all_citing_papers)} return publications[id+doi+title+year+reference_ids]\"\"\")\n",
    "network2 = build_network_dict(all_citing_papers, data2.publications)\n",
    "network2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false",
    "colab_type": "text",
    "id": "4aTZRpzaOafc"
   },
   "source": [
    "Finally we can merge the two levels into one single dataset (note: nodes with same data will be merged automatically)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "Collapsed": "false",
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 408
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 493,
     "status": "ok",
     "timestamp": 1571735805829,
     "user": {
      "displayName": "Michele Pasin",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AAuE7mBu8LVjIGgontF2Wax51BoL5KFx8esezX3bUmaa0g=s64",
      "userId": "10309320684375994511"
     },
     "user_tz": -60
    },
    "id": "UdvVlXFrNdbY",
    "outputId": "1281b0c9-792b-411c-8bb2-fd205312aa88"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'pub.1053279155': ['pub.1103275659',\n",
       "  'pub.1012651711',\n",
       "  'pub.1005502446',\n",
       "  'pub.1008922470',\n",
       "  'pub.1053157726'],\n",
       " 'pub.1103275659': ['pub.1128314811'],\n",
       " 'pub.1115224509': ['pub.1130502573',\n",
       "  'pub.1129513039',\n",
       "  'pub.1130518902',\n",
       "  'pub.1129302386',\n",
       "  'pub.1117695595',\n",
       "  'pub.1126679217'],\n",
       " 'pub.1012651711': ['pub.1130168753'],\n",
       " 'pub.1053157726': [],\n",
       " 'pub.1005502446': [],\n",
       " 'pub.1008922470': [],\n",
       " 'pub.1125691748': ['pub.1129412317'],\n",
       " 'pub.1125056530': [],\n",
       " 'pub.1128314811': [],\n",
       " 'pub.1113878770': ['pub.1127814760',\n",
       "  'pub.1128444159',\n",
       "  'pub.1129925269',\n",
       "  'pub.1127416559',\n",
       "  'pub.1127173019',\n",
       "  'pub.1128794002',\n",
       "  'pub.1129698755',\n",
       "  'pub.1129698601',\n",
       "  'pub.1127252959'],\n",
       " 'pub.1109815383': [],\n",
       " 'pub.1107354292': ['pub.1127855566', 'pub.1128759793']}"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final = dict(network1, **network2 )\n",
    "final"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false",
    "colab_type": "text",
    "id": "Id9h9iXDOVkk"
   },
   "source": [
    "## Building a Simple Dataviz\n",
    "\n",
    "We can build a simple visualization using the excellent [pyvis](https://pyvis.readthedocs.io/en/latest/tutorial.html) library. A custom version of pyvis is already included in [dimcli.core.extras](https://github.com/digital-science/dimcli/blob/master/dimcli/core/extras.py) and is called NetworkViz (note: this custom version only fixes a bug that prevents pyvis graphs to be displayed online with Google Colab)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [],
   "source": [
    "# load custom version of pyvis\n",
    "from dimcli.core.extras import NetworkViz"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "Collapsed": "false",
    "colab": {},
    "colab_type": "code",
    "id": "WPAf6zy1Sdr5"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <iframe\n",
       "            width=\"100%\"\n",
       "            height=\"800px\"\n",
       "            src=\"citation.html\"\n",
       "            frameborder=\"0\"\n",
       "            allowfullscreen\n",
       "        ></iframe>\n",
       "        "
      ],
      "text/plain": [
       "<IPython.lib.display.IFrame at 0x11ef14df0>"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "net = NetworkViz(notebook=True, width=\"100%\", height=\"800px\")\n",
    "net.heading = \"A simple citation network\"\n",
    "\n",
    "nodes = []\n",
    "for x in final:\n",
    "  nodes.append(x)\n",
    "  nodes += final[x]\n",
    "nodes = list(set(nodes))\n",
    "\n",
    "net.add_nodes(nodes) # node ids and labels = [\"a\", \"b\", \"c\", \"d\"]\n",
    "\n",
    "for x in final:\n",
    "  for target in final[x]:\n",
    "    net.add_edge(x, target)\n",
    "\n",
    "net.show(\"citation.html\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false",
    "colab_type": "text",
    "id": "Y7pg_VXhVZ2z"
   },
   "source": [
    "## Final considerations \n",
    "\n",
    "### Querying for more than 1000 results\n",
    "\n",
    "Each API query can return a maximum of 1000 records, so you must use the limit/skip syntax to get more. \n",
    "\n",
    "See the [paginating results section in the docs](https://docs.dimensions.ai/dsl/language.html#paginating-results) for more info.\n",
    "\n",
    "### Querying for more than 50K results\n",
    "\n",
    "Even with limit/skip, one can only download 50k records for each single query. \n",
    "\n",
    "So if your list of PUB-ids is getting too long (eg > 300) you should consider splitting up the list into chunks create an extra loop to go through all of them without hitting the max upper limit. \n",
    "\n",
    "### Dealing with highly cited publications \n",
    "\n",
    "Some publications can have lots of citations: for example, here we have a single paper with 200K+ citation: https://app.dimensions.ai/details/publication/pub.1076750128 \n",
    "\n",
    "That's quite an exceptional case, but there are several publications with more than 10k citations each. When you encounter such cases, you will hit the 50k limit pretty quickly, so you need to keep an eye out for these and possibly 'slice' the data in different ways eg by year or journal (so to get less results).\n",
    "\n",
    "### Pre-checking citations counts \n",
    "\n",
    "The `times_cited` and `recent_citations` fields of [publications](https://docs.dimensions.ai/dsl/data-sources.html#publications) can be used to check how many citations a paper has (ps `recent_citations` counts the last two years only). \n",
    "\n",
    "So, by using these aggregated figures, it is possible to get a feeling for the size of citations-data we'll have to deal with before setting up a proper data extraction pipeline. \n"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [],
   "name": "Citation-Analysis.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
